// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: apps/mconf/pb/service.proto

package mconf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error)
	QueryGroup(ctx context.Context, in *QueryGroupRequest, opts ...grpc.CallOption) (*GroupSet, error)
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*Group, error)
	QueryItem(ctx context.Context, in *QueryItemRequest, opts ...grpc.CallOption) (*ItemSet, error)
	AddItemToGroup(ctx context.Context, in *AddItemToGroupRequest, opts ...grpc.CallOption) (*ItemSet, error)
	RemoveItemFromGroup(ctx context.Context, in *RemoveItemFromGroupRequest, opts ...grpc.CallOption) (*ItemSet, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.mconf.Service/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryGroup(ctx context.Context, in *QueryGroupRequest, opts ...grpc.CallOption) (*GroupSet, error) {
	out := new(GroupSet)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.mconf.Service/QueryGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.mconf.Service/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryItem(ctx context.Context, in *QueryItemRequest, opts ...grpc.CallOption) (*ItemSet, error) {
	out := new(ItemSet)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.mconf.Service/QueryItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddItemToGroup(ctx context.Context, in *AddItemToGroupRequest, opts ...grpc.CallOption) (*ItemSet, error) {
	out := new(ItemSet)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.mconf.Service/AddItemToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RemoveItemFromGroup(ctx context.Context, in *RemoveItemFromGroupRequest, opts ...grpc.CallOption) (*ItemSet, error) {
	out := new(ItemSet)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.mconf.Service/RemoveItemFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	CreateGroup(context.Context, *CreateGroupRequest) (*Group, error)
	QueryGroup(context.Context, *QueryGroupRequest) (*GroupSet, error)
	DeleteGroup(context.Context, *DeleteGroupRequest) (*Group, error)
	QueryItem(context.Context, *QueryItemRequest) (*ItemSet, error)
	AddItemToGroup(context.Context, *AddItemToGroupRequest) (*ItemSet, error)
	RemoveItemFromGroup(context.Context, *RemoveItemFromGroupRequest) (*ItemSet, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) CreateGroup(context.Context, *CreateGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedServiceServer) QueryGroup(context.Context, *QueryGroupRequest) (*GroupSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGroup not implemented")
}
func (UnimplementedServiceServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedServiceServer) QueryItem(context.Context, *QueryItemRequest) (*ItemSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryItem not implemented")
}
func (UnimplementedServiceServer) AddItemToGroup(context.Context, *AddItemToGroupRequest) (*ItemSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemToGroup not implemented")
}
func (UnimplementedServiceServer) RemoveItemFromGroup(context.Context, *RemoveItemFromGroupRequest) (*ItemSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItemFromGroup not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.mconf.Service/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.mconf.Service/QueryGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryGroup(ctx, req.(*QueryGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.mconf.Service/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.mconf.Service/QueryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryItem(ctx, req.(*QueryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddItemToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddItemToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.mconf.Service/AddItemToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddItemToGroup(ctx, req.(*AddItemToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RemoveItemFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RemoveItemFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.mconf.Service/RemoveItemFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RemoveItemFromGroup(ctx, req.(*RemoveItemFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infraboard.keyauth.mconf.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _Service_CreateGroup_Handler,
		},
		{
			MethodName: "QueryGroup",
			Handler:    _Service_QueryGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Service_DeleteGroup_Handler,
		},
		{
			MethodName: "QueryItem",
			Handler:    _Service_QueryItem_Handler,
		},
		{
			MethodName: "AddItemToGroup",
			Handler:    _Service_AddItemToGroup_Handler,
		},
		{
			MethodName: "RemoveItemFromGroup",
			Handler:    _Service_RemoveItemFromGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/mconf/pb/service.proto",
}
