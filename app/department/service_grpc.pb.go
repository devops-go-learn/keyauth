// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package department

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	QueryDepartment(ctx context.Context, in *QueryDepartmentRequest, opts ...grpc.CallOption) (*Set, error)
	DescribeDepartment(ctx context.Context, in *DescribeDeparmentRequest, opts ...grpc.CallOption) (*Department, error)
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	QueryApplicationForm(ctx context.Context, in *QueryApplicationFormRequet, opts ...grpc.CallOption) (*ApplicationFormSet, error)
	DescribeApplicationForm(ctx context.Context, in *DescribeApplicationFormRequet, opts ...grpc.CallOption) (*ApplicationForm, error)
	JoinDepartment(ctx context.Context, in *JoinDepartmentRequest, opts ...grpc.CallOption) (*ApplicationForm, error)
	DealApplicationForm(ctx context.Context, in *DealApplicationFormRequest, opts ...grpc.CallOption) (*ApplicationForm, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) QueryDepartment(ctx context.Context, in *QueryDepartmentRequest, opts ...grpc.CallOption) (*Set, error) {
	out := new(Set)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.department.Service/QueryDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DescribeDepartment(ctx context.Context, in *DescribeDeparmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.department.Service/DescribeDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.department.Service/CreateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.department.Service/UpdateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.department.Service/DeleteDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryApplicationForm(ctx context.Context, in *QueryApplicationFormRequet, opts ...grpc.CallOption) (*ApplicationFormSet, error) {
	out := new(ApplicationFormSet)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.department.Service/QueryApplicationForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DescribeApplicationForm(ctx context.Context, in *DescribeApplicationFormRequet, opts ...grpc.CallOption) (*ApplicationForm, error) {
	out := new(ApplicationForm)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.department.Service/DescribeApplicationForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) JoinDepartment(ctx context.Context, in *JoinDepartmentRequest, opts ...grpc.CallOption) (*ApplicationForm, error) {
	out := new(ApplicationForm)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.department.Service/JoinDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DealApplicationForm(ctx context.Context, in *DealApplicationFormRequest, opts ...grpc.CallOption) (*ApplicationForm, error) {
	out := new(ApplicationForm)
	err := c.cc.Invoke(ctx, "/infraboard.keyauth.department.Service/DealApplicationForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	QueryDepartment(context.Context, *QueryDepartmentRequest) (*Set, error)
	DescribeDepartment(context.Context, *DescribeDeparmentRequest) (*Department, error)
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*Department, error)
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*Department, error)
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*Department, error)
	QueryApplicationForm(context.Context, *QueryApplicationFormRequet) (*ApplicationFormSet, error)
	DescribeApplicationForm(context.Context, *DescribeApplicationFormRequet) (*ApplicationForm, error)
	JoinDepartment(context.Context, *JoinDepartmentRequest) (*ApplicationForm, error)
	DealApplicationForm(context.Context, *DealApplicationFormRequest) (*ApplicationForm, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) QueryDepartment(context.Context, *QueryDepartmentRequest) (*Set, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDepartment not implemented")
}
func (UnimplementedServiceServer) DescribeDepartment(context.Context, *DescribeDeparmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDepartment not implemented")
}
func (UnimplementedServiceServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedServiceServer) UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedServiceServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedServiceServer) QueryApplicationForm(context.Context, *QueryApplicationFormRequet) (*ApplicationFormSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryApplicationForm not implemented")
}
func (UnimplementedServiceServer) DescribeApplicationForm(context.Context, *DescribeApplicationFormRequet) (*ApplicationForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeApplicationForm not implemented")
}
func (UnimplementedServiceServer) JoinDepartment(context.Context, *JoinDepartmentRequest) (*ApplicationForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinDepartment not implemented")
}
func (UnimplementedServiceServer) DealApplicationForm(context.Context, *DealApplicationFormRequest) (*ApplicationForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealApplicationForm not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_QueryDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.department.Service/QueryDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryDepartment(ctx, req.(*QueryDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DescribeDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDeparmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DescribeDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.department.Service/DescribeDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DescribeDepartment(ctx, req.(*DescribeDeparmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.department.Service/CreateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.department.Service/UpdateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.department.Service/DeleteDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryApplicationForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApplicationFormRequet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryApplicationForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.department.Service/QueryApplicationForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryApplicationForm(ctx, req.(*QueryApplicationFormRequet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DescribeApplicationForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeApplicationFormRequet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DescribeApplicationForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.department.Service/DescribeApplicationForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DescribeApplicationForm(ctx, req.(*DescribeApplicationFormRequet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_JoinDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).JoinDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.department.Service/JoinDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).JoinDepartment(ctx, req.(*JoinDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DealApplicationForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DealApplicationFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DealApplicationForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.keyauth.department.Service/DealApplicationForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DealApplicationForm(ctx, req.(*DealApplicationFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infraboard.keyauth.department.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryDepartment",
			Handler:    _Service_QueryDepartment_Handler,
		},
		{
			MethodName: "DescribeDepartment",
			Handler:    _Service_DescribeDepartment_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _Service_CreateDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _Service_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _Service_DeleteDepartment_Handler,
		},
		{
			MethodName: "QueryApplicationForm",
			Handler:    _Service_QueryApplicationForm_Handler,
		},
		{
			MethodName: "DescribeApplicationForm",
			Handler:    _Service_DescribeApplicationForm_Handler,
		},
		{
			MethodName: "JoinDepartment",
			Handler:    _Service_JoinDepartment_Handler,
		},
		{
			MethodName: "DealApplicationForm",
			Handler:    _Service_DealApplicationForm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/department/pb/service.proto",
}
