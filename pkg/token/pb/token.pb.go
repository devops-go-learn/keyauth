// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: token.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserType int32

const (
	UserType_SubAccount     UserType = 0
	UserType_PrimaryAccount UserType = 1
	UserType_ServiceAccount UserType = 2
	UserType_SupperAccount  UserType = 3
)

var UserType_name = map[int32]string{
	0: "SubAccount",
	1: "PrimaryAccount",
	2: "ServiceAccount",
	3: "SupperAccount",
}

var UserType_value = map[string]int32{
	"SubAccount":     0,
	"PrimaryAccount": 1,
	"ServiceAccount": 2,
	"SupperAccount":  3,
}

func (x UserType) String() string {
	return proto.EnumName(UserType_name, int32(x))
}

func (UserType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{0}
}

type GrantType int32

const (
	GrantType_PASSWORD GrantType = 0
	GrantType_LDAP     GrantType = 1
	GrantType_REFRESH  GrantType = 2
	GrantType_CLIENT   GrantType = 3
	GrantType_AUTHCODE GrantType = 4
	GrantType_IMPLICIT GrantType = 5
)

var GrantType_name = map[int32]string{
	0: "PASSWORD",
	1: "LDAP",
	2: "REFRESH",
	3: "CLIENT",
	4: "AUTHCODE",
	5: "IMPLICIT",
}

var GrantType_value = map[string]int32{
	"PASSWORD": 0,
	"LDAP":     1,
	"REFRESH":  2,
	"CLIENT":   3,
	"AUTHCODE": 4,
	"IMPLICIT": 5,
}

func (x GrantType) String() string {
	return proto.EnumName(GrantType_name, int32(x))
}

func (GrantType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{1}
}

type TokenType int32

const (
	TokenType_Bearer TokenType = 0
	TokenType_MAC    TokenType = 1
	TokenType_JWT    TokenType = 2
)

var TokenType_name = map[int32]string{
	0: "Bearer",
	1: "MAC",
	2: "JWT",
}

var TokenType_value = map[string]int32{
	"Bearer": 0,
	"MAC":    1,
	"JWT":    2,
}

func (x TokenType) String() string {
	return proto.EnumName(TokenType_name, int32(x))
}

func (TokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{2}
}

type BlockType int32

const (
	BlockType_SessionTerminated   BlockType = 0
	BlockType_OtherClientLoggedIn BlockType = 1
	BlockType_OtherPlaceLoggedIn  BlockType = 2
	BlockType_OtherIPLoggedIn     BlockType = 3
)

var BlockType_name = map[int32]string{
	0: "SessionTerminated",
	1: "OtherClientLoggedIn",
	2: "OtherPlaceLoggedIn",
	3: "OtherIPLoggedIn",
}

var BlockType_value = map[string]int32{
	"SessionTerminated":   0,
	"OtherClientLoggedIn": 1,
	"OtherPlaceLoggedIn":  2,
	"OtherIPLoggedIn":     3,
}

func (x BlockType) String() string {
	return proto.EnumName(BlockType_name, int32(x))
}

func (BlockType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{3}
}

type Token struct {
	SessionId            string    `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id" bson:"session_id"`
	AccessToken          string    `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3" json:"access_token" bson:"_id"`
	RefreshToken         string    `protobuf:"bytes,4,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token" bson:"refresh_token"`
	CreateAt             int64     `protobuf:"varint,5,opt,name=create_at,json=createAt,proto3" json:"create_at" bson:"create_at"`
	AccessExpiredAt      int64     `protobuf:"varint,6,opt,name=access_expired_at,json=accessExpiredAt,proto3" json:"access_expired_at" bson:"access_expired_at"`
	RefreshExpiredAt     int64     `protobuf:"varint,7,opt,name=refresh_expired_at,json=refreshExpiredAt,proto3" json:"refresh_expired_at" bson:"refresh_expired_at"`
	Domain               string    `protobuf:"bytes,8,opt,name=domain,proto3" json:"domain" bson:"domain"`
	UserType             UserType  `protobuf:"varint,9,opt,name=user_type,json=userType,proto3,enum=pb.UserType" json:"user_type" bson:"user_type"`
	Account              string    `protobuf:"bytes,10,opt,name=account,proto3" json:"account" bson:"account"`
	ApplicationId        string    `protobuf:"bytes,11,opt,name=application_id,json=applicationId,proto3" json:"application_id" bson:"application_id"`
	ApplicationName      string    `protobuf:"bytes,12,opt,name=application_name,json=applicationName,proto3" json:"application_name" bson:"application_name"`
	ClientId             string    `protobuf:"bytes,13,opt,name=client_id,json=clientId,proto3" json:"client_id" bson:"client_id"`
	StartGrantType       GrantType `protobuf:"varint,14,opt,name=start_grant_type,json=startGrantType,proto3,enum=pb.GrantType" json:"start_grant_type" bson:"start_grant_type"`
	GrantType            GrantType `protobuf:"varint,15,opt,name=grant_type,json=grantType,proto3,enum=pb.GrantType" json:"grant_type" bson:"grant_type"`
	Type                 TokenType `protobuf:"varint,16,opt,name=type,proto3,enum=pb.TokenType" json:"type" bson:"type"`
	Scope                string    `protobuf:"bytes,17,opt,name=scope,proto3" json:"scope" bson:"scope"`
	Description          string    `protobuf:"bytes,18,opt,name=description,proto3" json:"description" bson:"description"`
	IsBlock              bool      `protobuf:"varint,19,opt,name=is_block,json=isBlock,proto3" json:"is_block" bson:"is_block"`
	BlockType            BlockType `protobuf:"varint,20,opt,name=block_type,json=blockType,proto3,enum=pb.BlockType" json:"block_type" bson:"block_type"`
	BlockAt              int64     `protobuf:"varint,21,opt,name=block_at,json=blockAt,proto3" json:"block_at" bson:"block_at"`
	BlockReason          string    `protobuf:"bytes,22,opt,name=block_reason,json=blockReason,proto3" json:"block_reason" bson:"block_reason"`
	RemoteIp             string    `protobuf:"bytes,23,opt,name=remote_ip,json=remoteIp,proto3" json:"-" bson:"-"`
	UserAgent            string    `protobuf:"bytes,24,opt,name=user_agent,json=userAgent,proto3" json:"-" bson:"-"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{0}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *Token) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *Token) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *Token) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Token) GetAccessExpiredAt() int64 {
	if m != nil {
		return m.AccessExpiredAt
	}
	return 0
}

func (m *Token) GetRefreshExpiredAt() int64 {
	if m != nil {
		return m.RefreshExpiredAt
	}
	return 0
}

func (m *Token) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Token) GetUserType() UserType {
	if m != nil {
		return m.UserType
	}
	return UserType_SubAccount
}

func (m *Token) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Token) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

func (m *Token) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *Token) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Token) GetStartGrantType() GrantType {
	if m != nil {
		return m.StartGrantType
	}
	return GrantType_PASSWORD
}

func (m *Token) GetGrantType() GrantType {
	if m != nil {
		return m.GrantType
	}
	return GrantType_PASSWORD
}

func (m *Token) GetType() TokenType {
	if m != nil {
		return m.Type
	}
	return TokenType_Bearer
}

func (m *Token) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *Token) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Token) GetIsBlock() bool {
	if m != nil {
		return m.IsBlock
	}
	return false
}

func (m *Token) GetBlockType() BlockType {
	if m != nil {
		return m.BlockType
	}
	return BlockType_SessionTerminated
}

func (m *Token) GetBlockAt() int64 {
	if m != nil {
		return m.BlockAt
	}
	return 0
}

func (m *Token) GetBlockReason() string {
	if m != nil {
		return m.BlockReason
	}
	return ""
}

func (m *Token) GetRemoteIp() string {
	if m != nil {
		return m.RemoteIp
	}
	return ""
}

func (m *Token) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

type Set struct {
	Total                int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Items                []*Token `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Set) Reset()         { *m = Set{} }
func (m *Set) String() string { return proto.CompactTextString(m) }
func (*Set) ProtoMessage()    {}
func (*Set) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{1}
}
func (m *Set) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Set) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Set.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Set) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Set.Merge(m, src)
}
func (m *Set) XXX_Size() int {
	return m.Size()
}
func (m *Set) XXX_DiscardUnknown() {
	xxx_messageInfo_Set.DiscardUnknown(m)
}

var xxx_messageInfo_Set proto.InternalMessageInfo

func (m *Set) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Set) GetItems() []*Token {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.UserType", UserType_name, UserType_value)
	proto.RegisterEnum("pb.GrantType", GrantType_name, GrantType_value)
	proto.RegisterEnum("pb.TokenType", TokenType_name, TokenType_value)
	proto.RegisterEnum("pb.BlockType", BlockType_name, BlockType_value)
	proto.RegisterType((*Token)(nil), "pb.Token")
	proto.RegisterType((*Set)(nil), "pb.Set")
}

func init() { proto.RegisterFile("token.proto", fileDescriptor_3aff0bcd502840ab) }

var fileDescriptor_3aff0bcd502840ab = []byte{
	// 1063 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x96, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0xc7, 0x4d, 0xc9, 0xb2, 0xc4, 0xd1, 0x8b, 0xa9, 0x75, 0x12, 0x33, 0xcf, 0x83, 0x7a, 0x5d,
	0x16, 0x45, 0x1d, 0x17, 0x91, 0xdb, 0xe4, 0x50, 0x20, 0x05, 0x0a, 0x48, 0x8e, 0x9b, 0x28, 0x70,
	0x12, 0x75, 0xa5, 0x20, 0x45, 0x80, 0x42, 0xa0, 0xa8, 0x8d, 0x4c, 0xc4, 0x22, 0x09, 0x72, 0x55,
	0x34, 0xdf, 0xa4, 0x1f, 0xa9, 0xc7, 0x7e, 0x82, 0x45, 0x91, 0xde, 0x78, 0xe4, 0xa9, 0xc7, 0x82,
	0xb3, 0x7c, 0x53, 0x9c, 0x9e, 0xb4, 0xf3, 0xfb, 0xcf, 0xfe, 0x39, 0x1c, 0xce, 0xae, 0x0d, 0x6d,
	0xe1, 0xbf, 0xe3, 0xde, 0x20, 0x08, 0x7d, 0xe1, 0x93, 0x5a, 0xb0, 0xf8, 0xdf, 0xfd, 0x95, 0x2b,
	0xae, 0x36, 0x8b, 0x81, 0xe3, 0xaf, 0xcf, 0x56, 0xfe, 0xca, 0x3f, 0x43, 0x69, 0xb1, 0x79, 0x8b,
	0x11, 0x06, 0xb8, 0x52, 0x5b, 0xac, 0x7f, 0x3a, 0xd0, 0x98, 0xa5, 0x16, 0x64, 0x04, 0x10, 0xf1,
	0x28, 0x72, 0x7d, 0x6f, 0xee, 0x2e, 0xcd, 0xda, 0xb1, 0x76, 0xa2, 0x8f, 0xbe, 0x88, 0x25, 0xad,
	0xd0, 0x44, 0xd2, 0xfe, 0x22, 0xf2, 0xbd, 0x47, 0x56, 0xc9, 0x2c, 0xa6, 0x67, 0xc1, 0x78, 0x49,
	0x86, 0xd0, 0xb1, 0x1d, 0x87, 0x47, 0xd1, 0x1c, 0xcb, 0x32, 0xeb, 0xe8, 0x72, 0x14, 0x4b, 0xba,
	0xc5, 0x13, 0x49, 0x41, 0xf9, 0xa0, 0x41, 0x5b, 0x69, 0xaa, 0x8c, 0x17, 0xd0, 0x0d, 0xf9, 0xdb,
	0x90, 0x47, 0x57, 0x99, 0xc7, 0x2e, 0x7a, 0xdc, 0x8b, 0x25, 0xdd, 0x16, 0x12, 0x49, 0x6f, 0x29,
	0x93, 0x2d, 0x6c, 0xb1, 0x4e, 0x16, 0x2b, 0xbf, 0x1f, 0x40, 0x77, 0x42, 0x6e, 0x0b, 0x3e, 0xb7,
	0x85, 0xd9, 0x38, 0xd6, 0x4e, 0xea, 0xa3, 0xcf, 0x63, 0x49, 0x4b, 0x98, 0x48, 0x6a, 0x28, 0x9f,
	0x02, 0x59, 0xac, 0xa5, 0xd6, 0x43, 0x41, 0x7e, 0x81, 0x7e, 0x56, 0x3a, 0xff, 0x2d, 0x70, 0x43,
	0xbe, 0x4c, 0x7d, 0xf6, 0xd0, 0xe7, 0xdb, 0x58, 0xd2, 0x9b, 0x62, 0x22, 0xa9, 0xa9, 0xfc, 0x6e,
	0x48, 0x16, 0xdb, 0x57, 0xec, 0x42, 0xa1, 0xa1, 0x20, 0x36, 0x90, 0xbc, 0xfc, 0x8a, 0x7f, 0x13,
	0xfd, 0x1f, 0xc6, 0x92, 0x7e, 0x42, 0x4d, 0x24, 0xbd, 0xbb, 0xfd, 0xe2, 0xd5, 0x27, 0x18, 0x19,
	0x2c, 0x1f, 0xf1, 0x10, 0xf6, 0x96, 0xfe, 0xda, 0x76, 0x3d, 0xb3, 0x85, 0xad, 0xfc, 0x7f, 0x2c,
	0x69, 0x46, 0x12, 0x49, 0xbb, 0xca, 0x4a, 0xc5, 0x16, 0xcb, 0x04, 0x72, 0x09, 0xfa, 0x26, 0xe2,
	0xe1, 0x5c, 0xbc, 0x0f, 0xb8, 0xa9, 0x1f, 0x6b, 0x27, 0xbd, 0x07, 0x9d, 0x41, 0xb0, 0x18, 0xbc,
	0x8a, 0x78, 0x38, 0x7b, 0x1f, 0x70, 0xd5, 0xc4, 0x22, 0xa5, 0x6c, 0x62, 0x81, 0x2c, 0xd6, 0xda,
	0x64, 0xc9, 0xe4, 0x3b, 0x68, 0xda, 0x8e, 0xe3, 0x6f, 0x3c, 0x61, 0x02, 0xd6, 0xf0, 0x59, 0x2c,
	0x69, 0x8e, 0x12, 0x49, 0x7b, 0x45, 0xc3, 0x52, 0x60, 0xb1, 0x5c, 0x22, 0x0c, 0x7a, 0x76, 0x10,
	0x5c, 0xbb, 0x8e, 0x2d, 0xb2, 0xc1, 0x6c, 0xe3, 0xfe, 0xaf, 0x63, 0x49, 0x3f, 0x52, 0x12, 0x49,
	0x6f, 0x67, 0x36, 0x5b, 0xdc, 0x62, 0xdd, 0x0a, 0x18, 0x2f, 0xc9, 0x1b, 0x30, 0xaa, 0x19, 0x9e,
	0xbd, 0xe6, 0x66, 0x07, 0x5d, 0xcf, 0x62, 0x49, 0x6f, 0x68, 0x89, 0xa4, 0x87, 0x37, 0x7d, 0x53,
	0x25, 0xfd, 0x9c, 0x25, 0x7a, 0x61, 0xaf, 0x39, 0x4e, 0xdb, 0xb5, 0xcb, 0x3d, 0x91, 0x96, 0xda,
	0x45, 0x53, 0x35, 0x6d, 0x39, 0xac, 0x4c, 0x5b, 0x8e, 0xd2, 0x69, 0xc3, 0xf5, 0x78, 0x49, 0xae,
	0xc0, 0x88, 0x84, 0x1d, 0x8a, 0xf9, 0x2a, 0xb4, 0x3d, 0xa1, 0xba, 0xdf, 0xc3, 0xee, 0x77, 0xd3,
	0xee, 0x3f, 0x49, 0x29, 0xb6, 0x1f, 0x4b, 0xfd, 0x38, 0xb5, 0x2c, 0xf5, 0x63, 0xc5, 0x62, 0x3d,
	0x44, 0x85, 0x01, 0xf9, 0x09, 0xa0, 0xf2, 0x8c, 0xfd, 0x4f, 0x3d, 0x03, 0x4f, 0xff, 0x96, 0x7b,
	0x76, 0xfa, 0xab, 0xbe, 0xfa, 0xaa, 0xb0, 0x7c, 0x04, 0xbb, 0x68, 0x66, 0x94, 0x66, 0x78, 0x06,
	0xd1, 0xec, 0x30, 0x96, 0x74, 0x37, 0xb3, 0x69, 0x2b, 0x1b, 0x65, 0x80, 0x90, 0x9c, 0x41, 0x23,
	0x72, 0xfc, 0x80, 0x9b, 0x7d, 0x6c, 0xda, 0xdd, 0x58, 0x52, 0x05, 0x12, 0x49, 0x3b, 0xd9, 0x3b,
	0xa5, 0xa1, 0xc5, 0x14, 0x26, 0x4f, 0xa0, 0xbd, 0xe4, 0x91, 0x13, 0xba, 0x41, 0xda, 0x7c, 0x93,
	0xe0, 0xb6, 0x2f, 0x63, 0x49, 0xab, 0x38, 0x91, 0x94, 0x64, 0xf3, 0x5d, 0x42, 0x8b, 0x55, 0x53,
	0xc8, 0x23, 0x68, 0xb9, 0xd1, 0x7c, 0x71, 0xed, 0x3b, 0xef, 0xcc, 0x83, 0x63, 0xed, 0xa4, 0x35,
	0xa2, 0xb1, 0xa4, 0x05, 0x4b, 0x24, 0xdd, 0x57, 0x16, 0x39, 0xb1, 0x58, 0xd3, 0x8d, 0x46, 0xe9,
	0x2a, 0x6d, 0x22, 0x22, 0xd5, 0xc4, 0x5b, 0xe5, 0x7b, 0xa3, 0x5c, 0x36, 0xb1, 0x4c, 0x2a, 0x9b,
	0x58, 0x32, 0x8b, 0xe9, 0x8b, 0x3c, 0x3f, 0x2d, 0x47, 0x29, 0xb6, 0x30, 0x6f, 0xe3, 0x35, 0x80,
	0xe5, 0xe4, 0xac, 0x2c, 0x27, 0x27, 0x16, 0x6b, 0xe2, 0x72, 0x28, 0xc8, 0x33, 0xe8, 0x28, 0x1a,
	0x72, 0x3b, 0xf2, 0x3d, 0xf3, 0x0e, 0x36, 0xe5, 0xab, 0xf4, 0xfa, 0xad, 0xf2, 0x44, 0xd2, 0x83,
	0xaa, 0x87, 0xa2, 0x16, 0x6b, 0x63, 0xc8, 0x30, 0x22, 0x03, 0xd0, 0x43, 0xbe, 0xf6, 0x05, 0x9f,
	0xbb, 0x81, 0x79, 0x88, 0x46, 0xfd, 0x58, 0x52, 0xed, 0x7e, 0x92, 0x56, 0x83, 0xbb, 0xef, 0x5b,
	0xac, 0xa5, 0x72, 0xc6, 0x01, 0xf9, 0x06, 0x00, 0x8f, 0xbe, 0xbd, 0xe2, 0x9e, 0x30, 0xcd, 0xff,
	0xda, 0x80, 0x57, 0xc6, 0x30, 0xcd, 0xb1, 0x18, 0xd4, 0xa7, 0x5c, 0x10, 0x0a, 0x0d, 0xe1, 0x0b,
	0xfb, 0xda, 0xd4, 0xf0, 0x6d, 0xf5, 0xf4, 0xcb, 0x23, 0x60, 0xea, 0x87, 0x9c, 0x42, 0xc3, 0x15,
	0x7c, 0x1d, 0x99, 0xb5, 0xe3, 0xfa, 0x49, 0xfb, 0x81, 0x5e, 0xcc, 0x95, 0xca, 0x45, 0x8d, 0xa9,
	0x9f, 0xd3, 0x57, 0xd0, 0xca, 0x6f, 0x28, 0xd2, 0x03, 0x98, 0x6e, 0x16, 0x43, 0x75, 0x93, 0x18,
	0x3b, 0x84, 0x40, 0x6f, 0x12, 0xba, 0x6b, 0x3b, 0x7c, 0x9f, 0x33, 0x2d, 0x65, 0x53, 0x1e, 0xfe,
	0xea, 0x3a, 0x3c, 0x67, 0x35, 0xd2, 0x87, 0xee, 0x74, 0x13, 0x04, 0x3c, 0xcc, 0x51, 0xfd, 0xf4,
	0x67, 0xd0, 0xcb, 0x93, 0xd3, 0x81, 0xd6, 0x64, 0x38, 0x9d, 0xbe, 0x7e, 0xc9, 0x1e, 0x1b, 0x3b,
	0xa4, 0x05, 0xbb, 0x97, 0x8f, 0x87, 0x13, 0x43, 0x23, 0x6d, 0x68, 0xb2, 0x8b, 0x1f, 0xd9, 0xc5,
	0xf4, 0xa9, 0x51, 0x23, 0x00, 0x7b, 0xe7, 0x97, 0xe3, 0x8b, 0x17, 0x33, 0xa3, 0x9e, 0x6e, 0x18,
	0xbe, 0x9a, 0x3d, 0x3d, 0x7f, 0xf9, 0xf8, 0xc2, 0xd8, 0x4d, 0xa3, 0xf1, 0xf3, 0xc9, 0xe5, 0xf8,
	0x7c, 0x3c, 0x33, 0x1a, 0xa7, 0xf7, 0x40, 0x2f, 0xce, 0x48, 0xba, 0x69, 0xc4, 0xed, 0x90, 0x87,
	0xc6, 0x0e, 0x69, 0x42, 0xfd, 0xf9, 0xf0, 0xdc, 0xd0, 0xd2, 0xc5, 0xb3, 0xd7, 0x33, 0xa3, 0x76,
	0x7a, 0x05, 0x7a, 0x31, 0x56, 0xe4, 0x36, 0xf4, 0xa7, 0xea, 0xcf, 0xee, 0x8c, 0x87, 0x6b, 0xd7,
	0xb3, 0x05, 0x5f, 0x1a, 0x3b, 0xe4, 0x10, 0x0e, 0x5e, 0x8a, 0x2b, 0x1e, 0x9e, 0xe3, 0x85, 0x72,
	0xe9, 0xaf, 0x56, 0x7c, 0x39, 0xf6, 0x0c, 0x8d, 0xdc, 0x01, 0x82, 0xc2, 0xe4, 0xda, 0x76, 0x78,
	0xc1, 0x6b, 0xe4, 0x00, 0xf6, 0x91, 0x8f, 0x27, 0x05, 0xac, 0x8f, 0xee, 0xfc, 0xf1, 0xe1, 0x48,
	0xfb, 0xf3, 0xc3, 0x91, 0xf6, 0xd7, 0x87, 0x23, 0xed, 0xf7, 0xbf, 0x8f, 0x76, 0xde, 0xec, 0x0e,
	0xbe, 0x0f, 0x16, 0x8b, 0x3d, 0xfc, 0x9f, 0xe1, 0xe1, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x43,
	0x27, 0xb2, 0xb2, 0x75, 0x08, 0x00, 0x00,
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserAgent) > 0 {
		i -= len(m.UserAgent)
		copy(dAtA[i:], m.UserAgent)
		i = encodeVarintToken(dAtA, i, uint64(len(m.UserAgent)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.RemoteIp) > 0 {
		i -= len(m.RemoteIp)
		copy(dAtA[i:], m.RemoteIp)
		i = encodeVarintToken(dAtA, i, uint64(len(m.RemoteIp)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.BlockReason) > 0 {
		i -= len(m.BlockReason)
		copy(dAtA[i:], m.BlockReason)
		i = encodeVarintToken(dAtA, i, uint64(len(m.BlockReason)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.BlockAt != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.BlockAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.BlockType != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.BlockType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.IsBlock {
		i--
		if m.IsBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Type != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.GrantType != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.GrantType))
		i--
		dAtA[i] = 0x78
	}
	if m.StartGrantType != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.StartGrantType))
		i--
		dAtA[i] = 0x70
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintToken(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ApplicationName) > 0 {
		i -= len(m.ApplicationName)
		copy(dAtA[i:], m.ApplicationName)
		i = encodeVarintToken(dAtA, i, uint64(len(m.ApplicationName)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ApplicationId) > 0 {
		i -= len(m.ApplicationId)
		copy(dAtA[i:], m.ApplicationId)
		i = encodeVarintToken(dAtA, i, uint64(len(m.ApplicationId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x52
	}
	if m.UserType != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.UserType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x42
	}
	if m.RefreshExpiredAt != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.RefreshExpiredAt))
		i--
		dAtA[i] = 0x38
	}
	if m.AccessExpiredAt != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.AccessExpiredAt))
		i--
		dAtA[i] = 0x30
	}
	if m.CreateAt != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintToken(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintToken(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintToken(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *Set) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Set) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Set) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintToken(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovToken(uint64(m.CreateAt))
	}
	if m.AccessExpiredAt != 0 {
		n += 1 + sovToken(uint64(m.AccessExpiredAt))
	}
	if m.RefreshExpiredAt != 0 {
		n += 1 + sovToken(uint64(m.RefreshExpiredAt))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovToken(uint64(m.UserType))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.ApplicationName)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	if m.StartGrantType != 0 {
		n += 1 + sovToken(uint64(m.StartGrantType))
	}
	if m.GrantType != 0 {
		n += 1 + sovToken(uint64(m.GrantType))
	}
	if m.Type != 0 {
		n += 2 + sovToken(uint64(m.Type))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 2 + l + sovToken(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovToken(uint64(l))
	}
	if m.IsBlock {
		n += 3
	}
	if m.BlockType != 0 {
		n += 2 + sovToken(uint64(m.BlockType))
	}
	if m.BlockAt != 0 {
		n += 2 + sovToken(uint64(m.BlockAt))
	}
	l = len(m.BlockReason)
	if l > 0 {
		n += 2 + l + sovToken(uint64(l))
	}
	l = len(m.RemoteIp)
	if l > 0 {
		n += 2 + l + sovToken(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 2 + l + sovToken(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Set) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovToken(uint64(m.Total))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovToken(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozToken(x uint64) (n int) {
	return sovToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessExpiredAt", wireType)
			}
			m.AccessExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshExpiredAt", wireType)
			}
			m.RefreshExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshExpiredAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= UserType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartGrantType", wireType)
			}
			m.StartGrantType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartGrantType |= GrantType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantType", wireType)
			}
			m.GrantType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrantType |= GrantType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TokenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlock = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockType", wireType)
			}
			m.BlockType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockType |= BlockType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockAt", wireType)
			}
			m.BlockAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Set) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Set: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Set: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Token{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupToken = fmt.Errorf("proto: unexpected end of group")
)
