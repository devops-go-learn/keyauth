syntax = "proto3";

package keyauth.role;
option go_package = "github.com/infraboard/keyauth/pkg/role";

import "pkg/role/pb/request.proto";
import "pkg/role/pb/role.proto";
import "github.com/infraboard/mcube/pb/http/entry.proto";

// Service 角色服务
service RoleService {
	rpc CreateRole(CreateRoleRequest) returns(Role) {
		option (mcube.http.rest_api) = {
			path: "/policies"
			method: "POST"
			resource: "policy"
			auth_enable: true
			labels: [{
				key: "allow"
				value: "perm_admin"
			}]
		};
	};
	rpc QueryRole(QueryRoleRequest) returns(Set) {
		option (mcube.http.rest_api) = {
			path: "/policies"
			method: "POST"
			resource: "policy"
			auth_enable: true
			labels: [{
				key: "allow"
				value: "perm_admin"
			}]
		};
	};
	rpc DescribeRole(DescribeRoleRequest) returns(Role) {
		option (mcube.http.rest_api) = {
			path: "/policies"
			method: "POST"
			resource: "policy"
			auth_enable: true
			labels: [{
				key: "allow"
				value: "perm_admin"
			}]
		};
	};
	rpc DeleteRole(DeleteRoleRequest) returns(Role) {
		option (mcube.http.rest_api) = {
			path: "/policies"
			method: "POST"
			resource: "policy"
			auth_enable: true
			labels: [{
				key: "allow"
				value: "perm_admin"
			}]
		};
	};
	rpc AddPermissionToRole(AddPermissionToRoleRequest) returns(Role) {
		option (mcube.http.rest_api) = {
			path: "/policies"
			method: "POST"
			resource: "policy"
			auth_enable: true
			labels: [{
				key: "allow"
				value: "perm_admin"
			}]
		};		
	};
	rpc RemovePermissionFromRole(RemovePermissionFromRoleRequest) returns(Role) {
		option (mcube.http.rest_api) = {
			path: "/policies"
			method: "POST"
			resource: "policy"
			auth_enable: true
			labels: [{
				key: "allow"
				value: "perm_admin"
			}]
		};	
	};
}