syntax = "proto3";

package infraboard.keyauth.tag;
option go_package = "github.com/infraboard/keyauth/pkg/tag";

import "github.com/infraboard/mcube/pb/page/page.proto";
import "pkg/tag/pb/enum.proto";

// CreateTagRequest todo
message CreateTagRequest {
    // tag生效范围
    // @gotags: json:"scope_type"
    ScopeType scope_type = 1;
    // tag属于哪个namespace
    // @gotags: json:"namespace"
    string namespace = 2;
    // 建名称
    // @gotags: json:"key_name" validate:"lte=200"
    string key_name = 3;
    // 建标识
    // @gotags: json:"key_label"
    string key_label = 4;
    // 建描述
    // @gotags: json:"key_desc"
    string key_desc = 5;
    // 值来源
    // @gotags: json:"value_from"
    ValueFrom value_from = 6;
    // http 获取Tag 值的参数
    // @gotags: json:"http_from_option"
    HTTPFromOption http_from_option = 7;
    // String 类型的值
    // @gotags: json:"values"
    repeated ValueOption values = 8;
}

// QueryTagKeyRequest todo
message QueryTagKeyRequest {
    // @gotags: json:"page"
   infraboard.mcube.page.PageRequest page = 1;
    // tag生效范围
    // @gotags: json:"scope_type"
    ScopeType scope_type = 2;
    // 关键字
    // @gotags: json:"keywords"
    string keywords = 3;
}

// QueryTagValueRequest todo
message QueryTagValueRequest {
    // @gotags: json:"page"
   infraboard.mcube.page.PageRequest page = 1;
    // Tag Value ID
    // @gotags: json:"tag_id"
    string tag_id = 2;
}

// DeleteTagRequest todo
message DeleteTagRequest {
    // Tag Value ID
    // @gotags: json:"tag_id" validate:"lte=200"
    string tag_id = 2; 
}

message DescribeTagRequest {
    // Tag Value ID
    // @gotags: json:"tag_id" validate:"lte=200"
    string tag_id = 2; 
}

// ValueOptions 值描述
message ValueOption {
    // @gotags: bson:"value" json:"value" validate:"lte=200"
    string Value = 1;
    // @gotags: bson:"label" json:"label"
    string Label = 2;
    // @gotags: bson:"desc" json:"desc"
    string Desc = 3;
}

// HTTPFromOptions todo
message HTTPFromOption {
    // @gotags: bson:"url" json:"url"
    string url = 1;
    // @gotags: bson:"headers" json:"headers"
    map<string, string> headers = 2;
    // @gotags: bson:"search_key" json:"search_key"
    string search_key = 3;
    // @gotags: bson:"value_key" json:"value_key"
    string value_key = 4;
    // @gotags: bson:"label_key" json:"label_key"
    string label_key = 5;
    // @gotags: bson:"desc_key" json:"desc_key"
    string desc_key = 6;
}